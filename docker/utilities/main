#!/bin/bash

# Load .env function (if necessary)
loadEnv() {
  (set -a && . "${directory}/.env" && "$@")
}

# Reload Nginx and Apache containers gracefully
reload_http_containers() {
  echo -e "${GREEN}- Reloading HTTP...${NC}"
  docker ps -q -f name=NGINX && docker exec -it NGINX nginx -s reload
  local VERSION
  for VERSION in 7.4 8.0 8.1 8.2 8.3 8.4; do
    local CONTAINER="PHP_${VERSION}_APACHE"
    if docker inspect "$CONTAINER" &> /dev/null && docker ps -q -f name="^${CONTAINER}$" &> /dev/null; then
      docker exec -it "$CONTAINER" apachectl graceful &> /dev/null
    fi
  done
  echo -e "${GREEN}- HTTP Reloaded...${NC}"
}

# Check for the existence of necessary files
check_file_existence() {
  local files=("$@")

  for file in "${files[@]}"; do
    local full_path="${directory}${file}"

    if [ ! -f "$full_path" ]; then
      echo -e "${RED}- Error: $full_path file is missing! Aborting.${NC}"
      exit 1
    fi
  done
}

# Ensure necessary files exist, creating them if they don't
ensure_files_exist() {
  local files=("$@")

  for file in "${files[@]}"; do
    local full_path="${directory}${file}"
    local dir
    dir=$(dirname "$full_path")

    if [ ! -d "$dir" ]; then
      echo -e "${YELLOW}- Creating directory $dir.${NC}"
      mkdir -p "$dir"
    fi

    if [ ! -f "$full_path" ]; then
      echo -e "${YELLOW}- Creating file $full_path.${NC}"
      touch "$full_path"
    fi
  done
}

# Copy files while optionally excluding specific patterns
copy_files() {
  local full_source="${directory}$1"
  local full_destination="${directory}$2"
  local exclude_pattern="${4:-}"

  if [ ! -d "$full_destination" ]; then
    echo -e "${YELLOW}- Creating directory $full_destination for copying files.${NC}"
    mkdir -p "$full_destination"
  fi

  if [ -n "$exclude_pattern" ]; then
    find "$full_source" -type f -name "$3" ! -name "$exclude_pattern" -exec cp -ua {} "$full_destination" \;
  else
    find "$full_source" -type f -name "$3" -exec cp -ua {} "$full_destination" \;
  fi
}

# Wrapper for docker compose command
docker_compose() {
  docker compose --project-directory "$directory" \
    -f "$directory/docker/compose/main.yaml" \
    --env-file "$directory/docker/.env" "$@"
}

# Function to find PHP version and DOC_ROOT from config file
find_php_and_doc_root() {
  local config_file="$1"
  local php_version=""
  local doc_root=""

  # Check if file exists
  if [[ ! -f "$config_file" ]]; then
    echo "File $config_file not found."
    return 1
  fi

  # Extract PHP version (e.g., php83) from config file
  if grep -q "php[0-9][0-9]" "$config_file"; then
    php_version=$(grep -oE 'php[0-9]+' "$config_file" | head -n 1)
  fi

  # Extract DOC_ROOT from the config file (Apache or Nginx style)
  if grep -q "ProxyPass" "$config_file"; then
    doc_root=$(grep -oP 'fcgi://[^ ]+/(\S+)' "$config_file" | sed 's|fcgi://[^ ]+||')
  elif grep -q "fastcgi_param SCRIPT_FILENAME" "$config_file"; then
    doc_root=$(grep -oP 'fastcgi_param SCRIPT_FILENAME \S+' "$config_file" | sed 's|fastcgi_param SCRIPT_FILENAME ||')
  fi

  # Return values as global
  echo "$php_version"
  echo "$doc_root"
}

launch_php_container() {
    local domain="$1"
    local conf_file=""
    local nginx_conf="$directory/configuration/nginx/$domain.conf"
    local apache_conf="$directory/configuration/apache/$domain.conf"
    local doc_root=""

    # Check if the Nginx config file exists
    if [[ ! -f "$nginx_conf" ]]; then
        echo -e "${RED}No Nginx configuration file found for $domain.${NC}"
        exit 1
    fi

    # Determine if Nginx is using FastCGI (PHP-FPM) or Proxying to Apache
    if grep -q "fastcgi_pass" "$nginx_conf"; then
        php_container=$(grep -Eo 'fastcgi_pass ([^:]+):9000' "$nginx_conf" | awk '{print $2}' | sed 's/:9000$//')  # Remove :9000 port
        doc_root=$(grep -m1 -Eo 'root [^;]+' "$nginx_conf" | awk '{print $2}')  # Pick first match only
    elif grep -q "proxy_pass" "$nginx_conf"; then
        php_container=$(grep -Eo 'proxy_pass https://([^:]+):443' "$nginx_conf" | awk '{print $2}' | sed 's#https://##' | sed 's/:443$//')

        # Locate the matching Apache configuration
        if [[ ! -f "$apache_conf" ]]; then
            echo -e "${RED}No matching Apache configuration found for $domain.${NC}"
            exit 1
        fi

        doc_root=$(grep -m1 -Eo 'DocumentRoot [^ ]+' "$apache_conf" | awk '{print $2}')  # Pick first match only
    else
        echo -e "${RED}Could not determine the container setup for $domain.${NC}"
        exit 1
    fi

    # Validate extracted values
    if [[ -z "$php_container" ]]; then
        echo -e "${RED}Failed to determine PHP container for $domain.${NC}"
        exit 1
    fi
    if [[ -z "$doc_root" ]]; then
        echo -e "${YELLOW}Failed to determine document root for $domain.${NC}"
        doc_root="/app"
    fi

    docker exec -it "$php_container" bash --login -c "cd \"$doc_root\" && exec bash"
}

install_root_ca() {
  # Ensure the function is run as root
  if [ "$EUID" -ne 0 ]; then
    echo "Error: install_root_ca must be run as root. Try running with sudo."
    return 1
  fi

  # Use first argument as the certificate path, or default to configuration/rootCA/rootCA.pem
  local cert_src="$directory/configuration/rootCA/rootCA.pem"
  local dest_dir="/usr/local/share/ca-certificates"
  local cert_dest="$dest_dir/rootCA.crt"

  # Verify that the certificate file exists
  if [ ! -f "$cert_src" ]; then
    echo "Error: Certificate file '$cert_src' not found."
    return 1
  fi

  # Copy the certificate to the system's certificate directory with .crt extension
  cp "$cert_src" "$cert_dest"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to copy certificate to '$dest_dir'."
    return 1
  fi
  echo "Copied '$cert_src' to '$cert_dest'."

  # Update the CA certificates store
  update-ca-certificates
  if [ $? -ne 0 ]; then
    echo "Error: Failed to update CA certificates."
    return 1
  fi

  echo "Successfully installed the mkcert root CA certificate."
}

