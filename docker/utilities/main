#!/bin/bash

# Load .env function (if necessary)
loadEnv() {
  (set -a && . "${directory}/.env" && "$@")
}

# Reload Nginx and Apache containers gracefully
reload_http_containers() {
  # Reload Nginx
  if [ "$(docker ps -q -f name=NGINX)" ]; then
    echo -e "${GREEN}- Reloading Nginx container (NGINX)...${NC}"
    docker exec -it NGINX nginx -s reload
  fi

  # Gracefully reload Apache
  if [ "$(docker ps -q -f name=APACHE)" ]; then
    echo -e "${GREEN}- Gracefully reloading Apache container (APACHE)...${NC}"
    docker exec -it APACHE apachectl graceful
  fi
}

# Check for the existence of necessary files
check_file_existence() {
  local files=("$@")

  for file in "${files[@]}"; do
    local full_path="${directory}${file}"

    if [ ! -f "$full_path" ]; then
      echo -e "${RED}- Error: $full_path file is missing! Aborting.${NC}"
      exit 1
    fi
  done
}

# Ensure necessary files exist, creating them if they don't
ensure_files_exist() {
  local files=("$@")

  for file in "${files[@]}"; do
    local full_path="${directory}${file}"
    local dir
    dir=$(dirname "$full_path")

    if [ ! -d "$dir" ]; then
      echo -e "${YELLOW}- Creating directory $dir.${NC}"
      mkdir -p "$dir"
    fi

    if [ ! -f "$full_path" ]; then
      echo -e "${YELLOW}- Creating file $full_path.${NC}"
      touch "$full_path"
    fi
  done
}

# Copy files while optionally excluding specific patterns
copy_files() {
  local full_source="${directory}$1"
  local full_destination="${directory}$2"
  local exclude_pattern="${4:-}"

  if [ ! -d "$full_destination" ]; then
    echo -e "${YELLOW}- Creating directory $full_destination for copying files.${NC}"
    mkdir -p "$full_destination"
  fi

  if [ -n "$exclude_pattern" ]; then
    find "$full_source" -type f -name "$3" ! -name "$exclude_pattern" -exec cp -ua {} "$full_destination" \;
  else
    find "$full_source" -type f -name "$3" -exec cp -ua {} "$full_destination" \;
  fi
}

# Wrapper for docker compose command
docker_compose() {
  docker compose --project-directory "$directory" \
    -f "$directory/docker/compose/main.yaml" \
    --env-file "$directory/docker/.env" "$@"
}

# Function to find PHP version and DOC_ROOT from config file
find_php_and_doc_root() {
  local config_file="$1"
  local php_version=""
  local doc_root=""

  # Check if file exists
  if [[ ! -f "$config_file" ]]; then
    echo "File $config_file not found."
    return 1
  fi

  # Extract PHP version (e.g., php83) from config file
  if grep -q "php[0-9][0-9]" "$config_file"; then
    php_version=$(grep -oE 'php[0-9]+' "$config_file" | head -n 1)
  fi

  # Extract DOC_ROOT from the config file (Apache or Nginx style)
  if grep -q "ProxyPass" "$config_file"; then
    doc_root=$(grep -oP 'fcgi://[^ ]+/(\S+)' "$config_file" | sed 's|fcgi://[^ ]+||')
  elif grep -q "fastcgi_param SCRIPT_FILENAME" "$config_file"; then
    doc_root=$(grep -oP 'fastcgi_param SCRIPT_FILENAME \S+' "$config_file" | sed 's|fastcgi_param SCRIPT_FILENAME ||')
  fi

  # Return values as global
  echo "$php_version"
  echo "$doc_root"
}
