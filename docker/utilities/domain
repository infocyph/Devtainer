#!/bin/bash

# Function to validate domain name
function validate_domain() {
  local domain=$1
  local regex="^([a-zA-Z0-9][-a-zA-Z0-9]{0,253}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$"

  if [[ ! $domain =~ $regex ]]; then
    echo -e "${RED}Invalid domain name:${NC} $domain"
    return 1
  fi
  return 0
}

# Function to prompt for domain name and validate it
function prompt_for_domain() {
  while true; do
    read -e -r -p "$(echo -e "${CYAN}Enter the domain (e.g., example.com):${NC}") " DOMAIN_NAME
    if validate_domain "$DOMAIN_NAME"; then
      break
    else
      echo -e "${YELLOW}Please enter a valid domain name.${NC}"
    fi
  done
}

# Function to prompt for server type
function choose_server_type() {
  echo -e "${CYAN}Choose the server to configure:${NC}"
  PS3="Enter the number: "
  options=("Nginx" "Apache")
  local server_type
  select server_type in "${options[@]}"; do
    case $server_type in
    "Nginx" | "Apache")
      SERVER_TYPE=$server_type
      echo -e "${GREEN}You have selected $server_type.${NC}"
      break
      ;;
    *)
      echo -e "${RED}Invalid option, please select again.${NC}"
      ;;
    esac
  done
}

# Function to ask for HTTP or HTTPS or both
function prompt_for_http_https() {
  echo -e "${CYAN}Choose the type of protocol:${NC}"
  PS3="Enter the number: "
  options=("HTTP only" "HTTPS only" "Both HTTP and HTTPS")
  select choice in "${options[@]}"; do
    case $choice in
    "HTTP only")
      ENABLE_HTTPS="n"
      ENABLE_REDIRECTION="n"
      KEEP_HTTP="y"
      break
      ;;
    "HTTPS only")
      ENABLE_HTTPS="y"
      ENABLE_REDIRECTION="n"
      KEEP_HTTP="n"
      break
      ;;
    "Both HTTP and HTTPS")
      ENABLE_HTTPS="y"
      read -e -r -p "$(echo -e "${CYAN}Set up HTTP to HTTPS redirection (y/n)?${NC}") " ENABLE_REDIRECTION
      if [[ "$ENABLE_REDIRECTION" == "y" ]]; then
        KEEP_HTTP="n"
      else
        KEEP_HTTP="y"
      fi
      break
      ;;
    *)
      echo -e "${RED}Invalid option, please select again.${NC}"
      ;;
    esac
  done
}

# Function to ask for relative document root directory
function prompt_for_doc_root() {
  read -e -r -p "$(echo -e "${CYAN}Enter the relative DocumentRoot (e.g., /site):${NC}") " DOC_ROOT
  DOC_ROOT=$(validate_input "$DOC_ROOT" "DocumentRoot cannot be empty. Please enter a valid DocumentRoot:")
}

# Function to validate input (not empty)
function validate_input() {
  local input="$1"
  local message="$2"
  while [[ -z "$input" ]]; do
    echo -e "$message"
    read -r input
  done
  echo "$input"
}

# Function to ask for client max body size
function prompt_for_client_max_body_size() {
  read -e -r -p "$(echo -e "${CYAN}Enter the maximum client body size (in MB; Default 10):${NC}") " CLIENT_MAX_BODY_SIZE

  # If input is left blank, set default value
  if [[ -z "$CLIENT_MAX_BODY_SIZE" ]]; then
    CLIENT_MAX_BODY_SIZE="10" # Default to 10MB if blank
  fi

  # Validate that the input is a number
  while [[ ! "$CLIENT_MAX_BODY_SIZE" =~ ^[0-9]+$ ]]; do
    echo -e "${RED}Invalid input. Please enter a valid number for client body size (e.g., 12):${NC}"
    read -e -r CLIENT_MAX_BODY_SIZE
  done

  # For Apache, convert to bytes (LimitRequestBody requires bytes)
  CLIENT_MAX_BODY_SIZE_APACHE=$((CLIENT_MAX_BODY_SIZE * 1000000))

  # For Nginx, append 'M'
  CLIENT_MAX_BODY_SIZE="${CLIENT_MAX_BODY_SIZE}M"
}

# Function to prompt for PHP version
function prompt_for_php_version() {
  echo -e "${CYAN}Choose the PHP version:${NC}"
  PS3="Enter the number: "
  options=("7.3" "7.4" "8.0" "8.1" "8.2" "8.3" "8.4")
  select PHP_VERSION in "${options[@]}"; do
    if [[ -n "$PHP_VERSION" ]]; then
      PHP_CONTAINER_PROFILE="php${PHP_VERSION//./}"
      PHP_APACHE_CONTAINER_PROFILE="php${PHP_VERSION//./}apache"
      PHP_CONTAINER="PHP_${PHP_VERSION}"
      PHP_APACHE_CONTAINER="PHP_${PHP_VERSION}_APACHE"
      echo -e "${GREEN}You have selected PHP version $PHP_VERSION.${NC}"
      break
    else
      echo -e "${RED}Invalid option, please select again.${NC}"
    fi
  done
}

# New function: Prompt for enabling client certificate verification (only if HTTPS is enabled)
function prompt_for_client_verification() {
  echo -e "${CYAN}Do you want to enable client certificate verification (mutual TLS)? (y/n):${NC}"
  read -r client_verif_choice
  if [[ "$client_verif_choice" =~ ^[Yy] ]]; then
    ENABLE_CLIENT_VERIFICATION="ssl_verify_client on;"
    echo -e "${GREEN}Client certificate verification enabled ${RED}(Please import the client certificate)${GREEN}.${NC}"
  else
    ENABLE_CLIENT_VERIFICATION="ssl_verify_client off;"
    echo -e "${YELLOW}Client certificate verification disabled.${NC}"
  fi
}

# Function to generate configuration from template
function generate_conf_from_template() {
  local template_file=$1
  local output_file=$2

  # Replace placeholders in the template and append to the new conf file
  sed -e "s|{{SERVER_NAME}}|$DOMAIN_NAME|g" \
      -e "s|{{DOC_ROOT}}|$DOC_ROOT|g" \
      -e "s|{{CLIENT_MAX_BODY_SIZE}}|$CLIENT_MAX_BODY_SIZE|g" \
      -e "s|{{CLIENT_MAX_BODY_SIZE_APACHE}}|$CLIENT_MAX_BODY_SIZE_APACHE|g" \
      -e "s|{{PHP_APACHE_CONTAINER}}|$PHP_APACHE_CONTAINER|g" \
      -e "s|{{PHP_CONTAINER}}|$PHP_CONTAINER|g" \
      -e "s|{{CLIENT_VERIFICATION}}|$ENABLE_CLIENT_VERIFICATION|g" \
      "$template_file" >>"$output_file"
}

function create_configuration() {
  local CONFIG_NGINX="configuration/nginx/${DOMAIN_NAME}.conf"
  local CONFIG_APACHE="configuration/apache/${PHP_CONTAINER_PROFILE}/${DOMAIN_NAME}.conf"
  local CONFIG_FILE
  local base_template_path="$directory/docker/template"

  # Set configuration file path based on server type
  if [[ "$SERVER_TYPE" == "Nginx" ]]; then
    CONFIG_FILE=$CONFIG_NGINX
    modify_compose_profiles "$directory/docker/.env" "COMPOSE_PROFILES" "add" "${PHP_CONTAINER_PROFILE}"
  elif [[ "$SERVER_TYPE" == "Apache" ]]; then
    CONFIG_FILE=$CONFIG_APACHE
    modify_compose_profiles "$directory/docker/.env" "COMPOSE_PROFILES" "add" "${PHP_APACHE_CONTAINER_PROFILE}"
  else
    echo -e "${RED}Invalid server type: $SERVER_TYPE${NC}"
    return 1
  fi

  # Handle HTTP configuration
  if [[ "$ENABLE_REDIRECTION" == "y" ]]; then
    generate_conf_from_template "$base_template_path/redirect.nginx.conf" "$directory/$CONFIG_NGINX"
  elif [[ "$KEEP_HTTP" == "y" || "$ENABLE_HTTPS" == "n" ]]; then
    [[ "$SERVER_TYPE" == "Apache" ]] && generate_conf_from_template "$base_template_path/proxy-http.nginx.conf" "$directory/$CONFIG_NGINX"
    generate_conf_from_template "$base_template_path/http.${SERVER_TYPE,,}.conf" "$directory/$CONFIG_FILE"
  fi

  # Handle HTTPS configuration
  if [[ "$ENABLE_HTTPS" == "y" ]]; then
    [[ "$SERVER_TYPE" == "Apache" ]] && generate_conf_from_template "$base_template_path/proxy-https.nginx.conf" "$directory/$CONFIG_NGINX"
    generate_conf_from_template "$base_template_path/https.${SERVER_TYPE,,}.conf" "$directory/$CONFIG_FILE"

    # Issue SSL certificate
    docker ps --filter "name=SERVER_TOOLS" --format '{{.Names}}' | grep -q "^SERVER_TOOLS$" && docker exec -it SERVER_TOOLS certify
  fi

  echo -e "\n${GREEN}Configuration for ${DOMAIN_NAME} has been saved.${NC}"
}

# Start the script
function configure_server() {
  show_step 1 7
  prompt_for_domain
  show_step 2 7
  choose_server_type
  show_step 3 7
  prompt_for_http_https
  show_step 4 7
  prompt_for_doc_root
  show_step 5 7
  prompt_for_client_max_body_size
  show_step 6 7
  prompt_for_php_version

  # Only prompt for client verification if HTTPS is enabled
  if [[ "$ENABLE_HTTPS" == "y" ]]; then
    show_step 7 7
    prompt_for_client_verification
  else
    ENABLE_CLIENT_VERIFICATION="n"
  fi

  create_configuration
}
