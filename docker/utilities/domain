#!/bin/bash

# Function to validate domain name
function validate_domain() {
    local domain=$1
    local regex="^([a-zA-Z0-9][-a-zA-Z0-9]{0,253}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$"

    if [[ ! $domain =~ $regex ]]; then
        echo -e "${RED}Invalid domain name:${NC} $domain"
        return 1
    fi
    return 0
}

# Function to prompt for domain name and validate it
function prompt_for_domain() {
    while true; do
        read -e -r -p "$(echo -e "${CYAN}Enter the domain (e.g., example.com):${NC}") " DOMAIN_NAME
        if validate_domain "$DOMAIN_NAME"; then
            break
        else
            echo -e "${YELLOW}Please enter a valid domain name.${NC}"
        fi
    done
}

# Function to prompt for server type
function choose_server_type() {
    echo -e "${CYAN}Choose the server to configure:${NC}"
    PS3="Enter the number: "
    options=("Nginx" "Apache")
    select server_type in "${options[@]}"; do
        case $server_type in
            "Nginx"|"Apache")
                SERVER_TYPE=$server_type
                echo -e "${GREEN}You have selected $server_type.${NC}"
                break
                ;;
            *)
                echo -e "${RED}Invalid option, please select again.${NC}"
                ;;
        esac
    done
}

# Function to ask for HTTP or HTTPS or both
function prompt_for_http_https() {
    echo -e "${CYAN}Choose the type of protocol:${NC}"
    PS3="Enter the number: "
    options=("HTTP only" "HTTPS only" "Both HTTP and HTTPS")
    select choice in "${options[@]}"; do
        case $choice in
            "HTTP only")
                ENABLE_HTTPS="n"
                ENABLE_REDIRECTION="n"
                KEEP_HTTP="y"
                break
                ;;
            "HTTPS only")
                check_container_not_running "CERTIFICATE_BOT"
                ENABLE_HTTPS="y"
                ENABLE_REDIRECTION="n"
                KEEP_HTTP="n"
                break
                ;;
            "Both HTTP and HTTPS")
                check_container_not_running "CERTIFICATE_BOT"
                ENABLE_HTTPS="y"
                read -e -r -p "$(echo -e "${CYAN}Set up HTTP to HTTPS redirection (y/n)?${NC}") " ENABLE_REDIRECTION
                if [[ "$ENABLE_REDIRECTION" == "y" ]]; then
                    KEEP_HTTP="n"
                else
                    KEEP_HTTP="y"
                fi
                break
                ;;
            *)
                echo -e "${RED}Invalid option, please select again.${NC}"
                ;;
        esac
    done
}

# Function to ask for relative document root directory
function prompt_for_doc_root() {
    read -e -r -p "$(echo -e "${CYAN}Enter the relative DocumentRoot (e.g., /site):${NC}") " DOC_ROOT
    DOC_ROOT=$(validate_input "$DOC_ROOT" "DocumentRoot cannot be empty. Please enter a valid DocumentRoot:")
}

# Function to validate input (not empty)
function validate_input() {
    local input="$1"
    local message="$2"
    while [[ -z "$input" ]]; do
        echo -e "$message"
        read -r input
    done
    echo "$input"
}

# Function to ask for client max body size
function prompt_for_client_max_body_size() {
    read -e -r -p "$(echo -e "${CYAN}Enter the maximum client body size (in MB, e.g., 12):${NC}") " CLIENT_MAX_BODY_SIZE

    # If input is left blank, set default value
    if [[ -z "$CLIENT_MAX_BODY_SIZE" ]]; then
        CLIENT_MAX_BODY_SIZE="10"  # Default to 10MB if blank
    fi

    # Validate that the input is a number
    while [[ ! "$CLIENT_MAX_BODY_SIZE" =~ ^[0-9]+$ ]]; do
        echo -e "${RED}Invalid input. Please enter a valid number for client body size (e.g., 12):${NC}"
        read -e -r CLIENT_MAX_BODY_SIZE
    done

    # For Nginx, append 'M'
    if [[ "$SERVER_TYPE" == "Nginx" ]]; then
        CLIENT_MAX_BODY_SIZE="${CLIENT_MAX_BODY_SIZE}M"
    fi

    # For Apache, convert to bytes (LimitRequestBody requires bytes)
    if [[ "$SERVER_TYPE" == "Apache" ]]; then
        CLIENT_MAX_BODY_SIZE=$((CLIENT_MAX_BODY_SIZE * 1000000))  # Converts MB to bytes
    fi
}

# Function to prompt for PHP version
function prompt_for_php_version() {
    echo -e "${CYAN}Choose the PHP version:${NC}"
    PS3="Enter the number: "
    options=("7.4" "8.0" "8.1" "8.2" "8.3" "8.4")
    select PHP_VERSION in "${options[@]}"; do
        if [[ -n "$PHP_VERSION" ]]; then
            PHP_CONTAINER="php${PHP_VERSION//./}"
            echo -e "${GREEN}You have selected PHP version $PHP_VERSION.${NC}"
            break
        else
            echo -e "${RED}Invalid option, please select again.${NC}"
        fi
    done
}

# Function to generate configuration from template
function generate_conf_from_template() {
    local template_file=$1
    local output_file=$2

    # Replace placeholders in the template and append to the new conf file
    sed -e "s|{{SERVER_NAME}}|$DOMAIN_NAME|g" \
        -e "s|{{DOC_ROOT}}|$DOC_ROOT|g" \
        -e "s|{{CLIENT_MAX_BODY_SIZE}}|$CLIENT_MAX_BODY_SIZE|g" \
        -e "s|{{PHP_CONTAINER}}|$PHP_CONTAINER|g" \
        "$template_file" >> "$output_file"
}

function create_configuration() {
    local CONFIG_FILE
    local base_template_path="$directory/docker/template"

    # Set configuration file path based on server type
    if [[ "$SERVER_TYPE" == "Nginx" ]]; then
        CONFIG_FILE="configuration/nginx/${DOMAIN_NAME}.conf"
        modify_compose_profiles "$directory/docker/.env" "COMPOSE_PROFILES" "add" "nginx" "${PHP_CONTAINER}"
    elif [[ "$SERVER_TYPE" == "Apache" ]]; then
        CONFIG_FILE="configuration/apache/${DOMAIN_NAME}.conf"
        modify_compose_profiles "$directory/docker/.env" "COMPOSE_PROFILES" "add" "apache" "${PHP_CONTAINER}"
    else
        echo -e "${RED}Invalid server type: $SERVER_TYPE${NC}"
        return 1
    fi

    # Handle redirection and HTTP configuration
    if [[ "$ENABLE_REDIRECTION" == "y" ]]; then
        generate_conf_from_template "$base_template_path/redirect.${SERVER_TYPE,,}.conf" "$directory/$CONFIG_FILE"
    elif [[ "$KEEP_HTTP" == "y" || "$ENABLE_HTTPS" == "n" ]]; then
        generate_conf_from_template "$base_template_path/http.${SERVER_TYPE,,}.conf" "$directory/$CONFIG_FILE"
    fi

    # Handle HTTPS configuration
    if [[ "$ENABLE_HTTPS" == "y" ]]; then
        generate_conf_from_template "$base_template_path/https.${SERVER_TYPE,,}.conf" "$directory/$CONFIG_FILE"

        # Issue SSL certificate
        local certbot_cmd="docker exec -it CERTIFICATE_BOT certbot certonly --webroot --webroot-path=/var/www/certbot \
            --email ${EMAIL_ADDRESS} --agree-tos --no-eff-email -d ${DOMAIN_NAME} -d www.${DOMAIN_NAME}"
        if ! eval "$certbot_cmd"; then
            echo -e "${RED}Error issuing SSL certificate for ${DOMAIN_NAME}.${NC}"
            return 1
        fi
        modify_compose_profiles "$directory/docker/.env" "COMPOSE_PROFILES" "add" "certbot"
    fi

    echo -e "\n${GREEN}Configuration for ${DOMAIN_NAME} has been saved.${NC}"
}

# Start the script
function configure_server() {
    show_step 1 5
    prompt_for_domain
    show_step 2 5
    prompt_for_http_https
    show_step 3 5
    prompt_for_doc_root
    show_step 4 5
    prompt_for_client_max_body_size
    show_step 6 6
    prompt_for_php_version
    create_configuration
}
