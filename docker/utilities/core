#!/bin/bash

check_required_commands() {
  local commands=("$@")
  for cmd in "${commands[@]}"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      echo -e "${RED}- Error: '$cmd' is not installed! Aborting.${NC}"
      exit 1
    fi
  done
}

update_env() {
  local env_file="$1"
  local var_name="$2"
  local var_value="$3"

  [ ! -f "$env_file" ] && {
    echo -e "${YELLOW}File '$env_file' not found. Creating one.${NC}"
    touch "$env_file"
  }

  local escaped_var_name
  escaped_var_name=$(echo "$var_name" | sed 's/[]\/$*.^|[]/\\&/g')
  if grep -qE "^[# ]*${escaped_var_name}=" "$env_file"; then
    sed -i -E "s|^[# ]*(${escaped_var_name}=).*|\1${var_value}|" "$env_file"
  else
    echo "${var_name}=${var_value}" >>"$env_file"
  fi
}

reload_http_containers() {
  echo -e "${GREEN}- Reloading HTTP...${NC}"
  if docker ps -q -f name=NGINX &>/dev/null; then
    docker exec -it NGINX nginx -s reload
  fi
  if docker ps -q -f name=APACHE &>/dev/null; then
    docker exec -it APACHE apachectl graceful &>/dev/null
  fi
  echo -e "${GREEN}- HTTP Reloaded...${NC}"
}

docker_compose() {
  docker compose --project-directory "$directory" \
    -f "$directory/docker/compose/main.yaml" \
    --env-file "$directory/docker/.env" "$@"
}

check_file_existence() {
  local files=("$@")
  for file in "${files[@]}"; do
    local full_path="${directory}${file}"
    if [ ! -f "$full_path" ]; then
      echo -e "${RED}- Error: $full_path file is missing! Aborting.${NC}"
      exit 1
    fi
  done
}

ensure_files_exist() {
  local files=("$@")
  for file in "${files[@]}"; do
    local full_path="${directory}${file}"
    local dir
    dir=$(dirname "$full_path")
    if [ ! -d "$dir" ]; then
      echo -e "${YELLOW}- Creating directory $dir.${NC}"
      mkdir -p "$dir"
    fi
    if [ ! -f "$full_path" ]; then
      echo -e "${YELLOW}- Creating file $full_path.${NC}"
      touch "$full_path"
    fi
  done
}

launch_php_container() {
  local domain="$1"
  # Assuming $directory is defined globally.
  local nginx_conf="$directory/configuration/nginx/$domain.conf"
  local apache_conf="$directory/configuration/apache/$domain.conf"
  local doc_root=""
  local php_container=""

  [ ! -f "$nginx_conf" ] && {
    echo -e "${RED}No Nginx configuration found for $domain.${NC}"
    exit 1
  }

  if grep -q "fastcgi_pass" "$nginx_conf"; then
    php_container=$(grep -Eo 'fastcgi_pass ([^:]+):9000' "$nginx_conf" | awk '{print $2}' | sed 's/:9000$//')
    doc_root=$(grep -m1 -Eo 'root [^;]+' "$nginx_conf" | awk '{print $2}')
  elif grep -q "proxy_pass" "$nginx_conf"; then
    [ ! -f "$apache_conf" ] && {
      echo -e "${RED}No Apache configuration found for $domain.${NC}"
      exit 1
    }
    doc_root=$(grep -m1 -Eo 'DocumentRoot [^ ]+' "$apache_conf" | awk '{print $2}')
    php_container=$(grep -m1 'SetHandler "proxy:fcgi://' "$apache_conf" | sed -E 's/.*proxy:fcgi:\/\/([^:]+):9000".*/\1/')
  else
    echo -e "${RED}Could not determine the container setup for $domain.${NC}"
    exit 1
  fi

  [ -z "$php_container" ] && {
    echo -e "${RED}Failed to determine PHP container for $domain.${NC}"
    exit 1
  }

  [ -z "$doc_root" ] && {
    echo -e "${YELLOW}Document root not found for $domain. Defaulting to /app.${NC}"
    doc_root="/app"
  }

  docker exec -it "$php_container" bash --login -c "cd \"$doc_root\" && exec bash"
}

assign_permissions() {
  case "$(uname -s)" in
    *NT*|*Msys*|*Cygwin*) return ;;
  esac
  (( EUID == 0 )) || { echo -e "${RED}Please run with sudo.${NC}"; return; }

  chmod 755 "$directory"
  chmod 775 "$directory/configuration/"
  find "$directory/configuration/" -type f ! -perm 664 -exec chmod 664 {} \;
  chmod g+s "$directory/configuration/"

  chmod 755 "$directory/docker/"
  find "$directory/docker/" -type f ! -perm 644 -exec chmod 644 {} \;
#  find "$directory/docker/dockerfiles/scripts/" -type f ! -perm 755 -exec chmod 755 {} \;

  chmod 2777 "$directory/data"
  find "$directory/data" -mindepth 1 -maxdepth 1 -type d -exec chmod 2777 {} \;
  find "$directory/data" -type f -exec chmod 0666 {} \;

  chmod -R 777 "$directory/logs/"
  chown -R "$USER:docker" "$directory/logs/"

  chmod 755 "$directory/bin"
  find "$directory/bin" -type f ! -name '*.bat' ! -perm 744 -exec chmod 744 {} \;
  chmod 744 "$directory/server"

  ln -s "$directory/server" "/usr/local/bin/server"
}

modify_compose_profiles() {
  local env_file="$1"
  local var_name="$2"
  local action="$3"
  shift 3
  local profiles=("$@")

  # pull out existing, newline‑separated
  local existing_profiles=""
  if grep -q "^${var_name}=" "$env_file"; then
    existing_profiles=$(grep "^${var_name}=" "$env_file" |
      cut -d '=' -f 2 |
      tr ',' '\n')
  fi

  local updated_profiles=()

  case "$action" in
  add)
    # add any new ones
    for p in "${profiles[@]}"; do
      if ! grep -qx "$p" <<<"$existing_profiles"; then
        updated_profiles+=("$p")
      fi
    done
    # then re‑append the old ones
    while IFS= read -r old; do
      updated_profiles+=("$old")
    done <<<"$existing_profiles"
    ;;
  remove)
    for old in $existing_profiles; do
      [[ ! " ${profiles[*]} " =~ " ${old} " ]] && updated_profiles+=("$old")
    done
    ;;
  *)
    echo -e "${RED}Invalid action: $action${NC}"
    return 1
    ;;
  esac

  # join with commas
  local updated_profiles_str
  updated_profiles_str=$(
    IFS=,
    echo "${updated_profiles[*]}"
  )
  update_env "$env_file" "$var_name" "$updated_profiles_str"
}

install_root_ca() {
  local src="$directory/configuration/rootCA/rootCA.pem"
  local dest="/usr/local/share/ca-certificates/rootCA.crt"

  # must be root
  if ((EUID != 0)); then
    printf "%bError:%b must be run as root.\n" "$RED" "$NC"
    return 1
  fi

  # source file must exist
  if [[ ! -r $src ]]; then
    printf "%bError:%b certificate not found: %s\n" "$RED" "$NC" "$src"
    return 1
  fi

  printf "%bInstalling root CA certificate...%b\n" "$CYAN" "$NC"

  # copy with correct perms, then update trust store
  if install -m 644 "$src" "$dest"; then
    if command -v update-ca-certificates &>/dev/null; then
      update-ca-certificates
    elif command -v trust &>/dev/null; then
      trust extract-compat
    else
      printf "%bWarning:%b no CA-update tool found; skipping trust update.\n" "$YELLOW" "$NC"
    fi

    printf "%bSuccess:%b root CA installed to %s\n" "$GREEN" "$NC" "$dest"
    return 0
  else
    printf "%bError:%b failed to install root CA.\n" "$RED" "$NC"
    return 1
  fi
}
