#!/usr/bin/env bash
set -euo pipefail

# ─────────────────────────────────────────────────────────────────────────────
# Colors
# ─────────────────────────────────────────────────────────────────────────────
RED='\033[0;31m'; GREEN='\033[0;32m'
CYAN='\033[0;36m'; YELLOW='\033[1;33m'
NC='\033[0m'; BLUE='\033[0;34m'
MAGENTA='\033[0;35m'; WHITE='\033[0;37m'

# ─────────────────────────────────────────────────────────────────────────────
# SERVICE → PROFILE map (single profile per service)
# ─────────────────────────────────────────────────────────────────────────────
declare -A SERVICES=(
  [ELASTICSEARCH]="elasticsearch"
  [MYSQL]="mysql"
  [MARIADB]="mariadb"
  [MONGODB]="mongodb"
  [REDIS]="redis"
  [POSTGRESQL]="postgresql"
)

# ─────────────────────────────────────────────────────────────────────────────
# PROFILE → KEY=DEFAULT entries
# ─────────────────────────────────────────────────────────────────────────────
declare -A PROFILE_ENV=(
  [elasticsearch]="ELASTICSEARCH_VERSION=8.12.2 ELASTICSEARCH_PORT=9200"
  [mysql]="MYSQL_VERSION=latest MYSQL_PORT=3306 MYSQL_ROOT_PASSWORD=12345 MYSQL_USER=devuser MYSQL_PASSWORD=12345 MYSQL_DATABASE=localdb"
  [mariadb]="MARIADB_VERSION=latest MARIADB_PORT=3306 MARIADB_ROOT_PASSWORD=12345 MARIADB_USER=devuser MARIADB_PASSWORD=12345 MARIADB_DATABASE=localdb"
  [mongodb]="MONGODB_VERSION=latest MONGODB_PORT=27017 MONGODB_ROOT_USERNAME=root MONGODB_ROOT_PASSWORD=12345"
  [redis]="REDIS_VERSION=latest REDIS_PORT=6379"
  [postgresql]="POSTGRES_VERSION=latest POSTGRES_PORT=5432 POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres POSTGRES_DATABASE=postgres"
)

# ─────────────────────────────────────────────────────────────────────────────
# Queues for “deferred” operations
# ─────────────────────────────────────────────────────────────────────────────
declare -a PENDING_ENVS=()
declare -a PENDING_PROFILES=()

queue_env()      { PENDING_ENVS+=( "$1" ); }
queue_profile()  { PENDING_PROFILES+=( "$1" ); }

flush_envs() {
  local env_file="$directory/docker/.env" kv
  for kv in "${PENDING_ENVS[@]}"; do
    IFS='=' read -r key val <<<"$kv"
    update_env "$env_file" "$key" "$val"
  done
}

flush_profiles() {
  local env_file="$directory/docker/.env" profile
  for profile in "${PENDING_PROFILES[@]}"; do
    modify_compose_profiles "$env_file" "COMPOSE_PROFILES" "add" "$profile"
  done
}

# ─────────────────────────────────────────────────────────────────────────────
# Input helpers
# ─────────────────────────────────────────────────────────────────────────────
read_default() {
  local prompt="$1" default="$2" input
  read -rp "$(printf "${CYAN}%s [default: %s]: ${NC}" "$prompt" "$default")" input
  printf "%s" "${input:-$default}"
}

ask_yes() {
  local prompt="$1" ans
  read -rp "$(printf "${BLUE}%s (y/n): ${NC}" "$prompt")" ans
  [[ "${ans,,}" == "y" ]]
}

# ─────────────────────────────────────────────────────────────────────────────
# General settings (formerly "common variables")
# ─────────────────────────────────────────────────────────────────────────────
prompt_general_settings() {
  echo -e "${YELLOW}→ General Settings${NC}"

  # Timezone
  local default_tz tz
  if command -v timedatectl &>/dev/null; then
    default_tz=$(timedatectl show -p Timezone --value)
  elif [[ -n "${TZ-}" ]]; then
    default_tz="$TZ"
  elif command -v powershell.exe &>/dev/null; then
    default_tz=$(powershell.exe -NoProfile -Command "[System.TimeZoneInfo]::Local.Id" 2>/dev/null | tr -d '\r')
  elif [[ -f /etc/timezone ]]; then
    default_tz=$(< /etc/timezone)
  else
    default_tz=$(date +%Z)
  fi
  tz=$(read_default "Timezone (TZ)" "$default_tz")
  queue_env "TZ=$tz"

  # User / UID / GID
  local default_user user default_uid default_gid uid gid
  default_user=${USER:-$(id -un)}
  user=$(read_default "User" "$default_user")
  if id "$user" &>/dev/null; then
    default_uid=$(id -u "$user")
    default_gid=$(id -g "$user")
  else
    default_uid=$(id -u)
    default_gid=$(id -g)
  fi
  uid=$(read_default "User UID" "$default_uid")
  gid=$(read_default "User GID" "$default_gid")
  queue_env "USER=$user"
  queue_env "UID=$uid"
  queue_env "GID=$gid"
}

# ─────────────────────────────────────────────────────────────────────────────
# Handle one service
# ─────────────────────────────────────────────────────────────────────────────
process_service() {
  local service="$1"
  echo -e "\n${YELLOW}→ $service${NC}"
  ask_yes "Enable $service?" || {
    echo -e "${RED}Skipping $service${NC}"
    return
  }
  local profile="${SERVICES[$service]}"
  queue_profile "$profile"
  echo -e "${BLUE}Enter value(s) for $service:${NC}"
  local pair def
  for pair in ${PROFILE_ENV[$profile]}; do
    IFS='=' read -r key def <<<"$pair"
    val=$(read_default "$key" "$def")
    queue_env "$key=$val"
  done
}

# ─────────────────────────────────────────────────────────────────────────────
# Main flow: conditional general settings + services
# ─────────────────────────────────────────────────────────────────────────────
process_all() {
  if ask_yes "Configure general settings?"; then
    prompt_general_settings
  else
    echo -e "${RED}Skipping general settings${NC}"
  fi
  local svc
  for svc in "${!SERVICES[@]}"; do
    process_service "$svc"
  done
  flush_envs
  flush_profiles
  echo -e "\n${GREEN}✅ All services configured!${NC}"
}
