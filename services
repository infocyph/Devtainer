#!/bin/bash

# Color codes for better interaction (these should work in most bash terminals)
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No color

# Helper function to update or add variables to the .env file
update_or_add_env_var() {
  local var_name=$1
  local var_value=$2

  # Check if the variable already exists in the .env file
  if grep -q "^$var_name=" .env; then
    # Update the existing variable
    sed -i "s|^$var_name=.*|$var_name=$var_value|" .env
  else
    # Add the new variable
    echo "$var_name=$var_value" >> .env
  fi
}

# Helper function to prompt for env variables with handling existing values
prompt_with_existing() {
  local var_name=$1
  local default_value=$2

  # Check if variable already exists in the .env file
  current_value=$(grep "^$var_name=" .env | cut -d '=' -f 2-)

  if [ -n "$current_value" ]; then
    read -p "Enter value for $var_name (current: $current_value): " value
    if [ -z "$value" ]; then
      value=$current_value
    fi
  else
    read -p "Enter value for $var_name (default: $default_value): " value
    if [ -z "$value" ]; then
      value=$default_value
    fi
  fi

  update_or_add_env_var "$var_name" "$value"
}

# Function to handle enabling profiles and setting environment variables
process_profile() {
  local profile_name=$1
  local vars=("${!2}")

  # Ask user if they want to enable the profile (y/n prompt on the same line)
  echo -e "${CYAN}Do you want to enable $profile_name profile? (y/n)${NC} "
  read -n1 yn
  echo    # move to a new line

  if [[ $yn =~ [yY] ]]; then
    echo -e "${GREEN}Enabling $profile_name profile...${NC}"
    # Process each variable for the profile
    for var in "${vars[@]}"; do
      var_name=$(echo "$var" | cut -d= -f1)
      default_value=$(echo "$var" | cut -d= -f2-)
      prompt_with_existing "$var_name" "$default_value"
    done
  else
    echo -e "${RED}$profile_name profile skipped.${NC}"
  fi
}

# Define profiles and their environment variables in sequence
profiles=(
  "elasticsearch"
  "elasticsearch-cluster"
  "mongodb"
  "mongodb-replica"
  "mysql"
  "mysql-replication"
  "psql"
  "redis"
  "redis-replication"
)

# Map environment variables to each profile
declare -A profile_vars
profile_vars[elasticsearch]="ELASTICSEARCH_PORT=9200 TZ=Asia/Dhaka"
profile_vars[elasticsearch-cluster]="ELASTICSEARCH_NUMBER_OF_SHARDS=3 ELASTICSEARCH_NUMBER_OF_REPLICAS=1"
profile_vars[mongodb]="MONGODB_PORT=27017 MONGO_INITDB_ROOT_USERNAME=root MONGO_INITDB_ROOT_PASSWORD=12345"
profile_vars[mongodb-replica]="MONGO_REPLICA_SET_NAME=rs0 MONGO_REPLICA_HOSTS=mongo-primary:27017"
profile_vars[mysql]="MYSQL_PORT=3306 MYSQL_ROOT_PASSWORD=12345 MYSQL_USER=devuser MYSQL_PASSWORD=12345 MYSQL_DATABASE=localdb"
profile_vars[mysql-replication]="MYSQL_REPLICATION_USER=replicauser MYSQL_REPLICATION_PASSWORD=replpassword"
profile_vars[psql]="POSTGRES_PORT=5432 POSTGRES_USER=postgres POSTGRES_PASSWORD=postgres"
profile_vars[redis]="REDIS_PORT=6379"
profile_vars[redis-replication]="REDIS_REPLICA_PORT=6379"

# Iterate through the profiles array in sequence and process each profile
for profile in "${profiles[@]}"; do
  # Convert the profile's associated variables into an array
  IFS=' ' read -r -a vars <<< "${profile_vars[$profile]}"
  process_profile "$profile" vars[@]
done

echo -e "${GREEN}Configuration completed!${NC}"
