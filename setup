#!/bin/bash

# Function to validate domain name
function validate_domain() {
    local domain=$1
    local regex="^([a-zA-Z0-9][-a-zA-Z0-9]{0,253}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$"

    if [[ ! $domain =~ $regex ]]; then
        echo "Invalid domain name: $domain"
        return 1
    fi
    return 0
}

# Function to prompt for domain name and validate it
function prompt_for_domain() {
    while true; do
        read -r -p "Enter the domain (e.g., example.com): " DOMAIN_NAME
        if validate_domain "$DOMAIN_NAME"; then
            break
        else
            echo "Please enter a valid domain name."
        fi
    done
}

# Function to prompt for server type
function choose_server_type() {
    echo "Choose the server to configure:"
    PS3="Enter the number: "
    options=("Nginx" "Apache")
    select server_type in "${options[@]}"; do
        case $server_type in
            "Nginx"|"Apache")
                SERVER_TYPE=$server_type
                break
                ;;
            *)
                echo "Invalid option, please select again."
                ;;
        esac
    done
}

# Function to ask for HTTP or HTTPS or both
function prompt_for_http_https() {
    echo "Choose the type of protocol:"
    PS3="Enter the number: "
    options=("HTTP only" "HTTPS only" "Both HTTP and HTTPS")
    select choice in "${options[@]}"; do
        case $choice in
            "HTTP only")
                ENABLE_HTTPS="n"
                ENABLE_REDIRECTION="n"
                break
                ;;
            "HTTPS only")
                ENABLE_HTTPS="y"
                ENABLE_REDIRECTION="n"
                break
                ;;
            "Both HTTP and HTTPS")
                ENABLE_HTTPS="y"
                read -r -p "Set up HTTP to HTTPS redirection (y/n)? " ENABLE_REDIRECTION
                if [[ "$ENABLE_REDIRECTION" == "y" ]]; then
                    KEEP_HTTP="n"
                else
                    KEEP_HTTP="y"
                fi
                break
                ;;
            *)
                echo "Invalid option, please select again."
                ;;
        esac
    done
}

# Function to ask for relative document root directory
function prompt_for_doc_root() {
    read -r -p "Enter the relative DocumentRoot (after /app; e.g. /site or /site/public): " DOC_ROOT
    DOC_ROOT=$(validate_input "$DOC_ROOT" "DocumentRoot cannot be empty. Please enter a valid DocumentRoot:")
}

# Function to validate input (not empty)
function validate_input() {
    local input="$1"
    local message="$2"
    while [[ -z "$input" ]]; do
        echo "$message"
        read -r input
    done
    echo "$input"
}

# Function to ask for client max body size
function prompt_for_client_max_body_size() {
    read -r -p "Enter the maximum client body size (e.g., 12M): " CLIENT_MAX_BODY_SIZE
    CLIENT_MAX_BODY_SIZE=$(validate_input "$CLIENT_MAX_BODY_SIZE" "Client body size cannot be empty. Please enter a valid value (e.g., 12M):")
}

# Function to generate configuration from template
function generate_conf_from_template() {
    local template_file=$1
    local output_file=$2

    # Replace placeholders in the template and append to the new conf file
    sed -e "s|{{SERVER_NAME}}|$DOMAIN_NAME|g" \
        -e "s|{{DOC_ROOT}}|$DOC_ROOT|g" \
        -e "s|{{CLIENT_MAX_BODY_SIZE}}|$CLIENT_MAX_BODY_SIZE|g" \
        "$template_file" >> "$output_file"
}

# Main function to create the configuration based on user inputs
function create_configuration() {
    CONFIG_FILE="${DOMAIN_NAME}.conf"

    if [[ "$SERVER_TYPE" == "Nginx" ]]; then
        if [[ "$ENABLE_REDIRECTION" == "y" ]]; then
            generate_conf_from_template "redirect.nginx.conf" "$CONFIG_FILE"
        fi
        if [[ "$ENABLE_HTTPS" == "y" ]]; then
            generate_conf_from_template "https.nginx.conf" "$CONFIG_FILE"
        fi
        if [[ "$KEEP_HTTP" == "y" || "$ENABLE_HTTPS" == "n" ]]; then
            generate_conf_from_template "http.nginx.conf" "$CONFIG_FILE"
        fi
    elif [[ "$SERVER_TYPE" == "Apache" ]]; then
        if [[ "$ENABLE_REDIRECTION" == "y" ]]; then
            generate_conf_from_template "redirect.apache.conf" "$CONFIG_FILE"
        fi
        if [[ "$ENABLE_HTTPS" == "y" ]]; then
            generate_conf_from_template "https.apache.conf" "$CONFIG_FILE"
        fi
        if [[ "$KEEP_HTTP" == "y" || "$ENABLE_HTTPS" == "n" ]]; then
            generate_conf_from_template "http.apache.conf" "$CONFIG_FILE"
        fi
    fi

    echo "Configuration for $DOMAIN_NAME has been saved to $CONFIG_FILE"
}

# Start the script
function configure_server() {
    prompt_for_domain
    choose_server_type
    prompt_for_http_https
    prompt_for_doc_root
    prompt_for_client_max_body_size
    setup_ssl_certificate
    create_configuration
}

# Start configuration process
while true; do
    configure_server
    read -r -p "Do you want to configure another site? (y/n): " CONTINUE
    if [[ "$CONTINUE" != "y" ]]; then
        break
    fi
done

echo "All configurations have been completed."
