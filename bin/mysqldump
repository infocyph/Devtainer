#!/usr/bin/env bash
set -euo pipefail

# ————————————————————————————————————————————————
# 0) Load docker/.env (skip readonly UID)
# ————————————————————————————————————————————————
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/../docker/.env"

if [[ -r "$ENV_FILE" ]]; then
  set -o allexport
  # shellcheck disable=SC1090
  source <(grep -v '^UID=' "$ENV_FILE")
  set +o allexport
else
  echo "Warning: .env file not found at $ENV_FILE" >&2
fi

# ————————————————————————————————————————————————
# mysqldump(): wrapper around mysqldump inside Docker
#    --login : pull creds from .env
# ————————————————————————————————————————————————
mysqldump() {
  local login=false
  if [[ "${1:-}" == "--login" ]]; then
    login=true
    shift
  fi

  local SERVICE_NAME="MYSQL"

  # 1) ensure container is running
  if ! docker ps --format '{{.Names}}' | grep -qx "$SERVICE_NAME"; then
    echo "Error: container '$SERVICE_NAME' is not running." >&2
    return 1
  fi

  # 2) detect TTY vs non-TTY
  local FLAGS=$([[ -t 0 ]] && echo -it || echo -i)
  FLAGS+=" --rm -v $PWD:/workspace -w /workspace"

  # 3) build dump args
  local ARGS=()
  if [[ "$login" == true ]]; then
    ARGS+=(-h127.0.0.1 -P"$MYSQL_PORT" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD")
    if [[ $# -eq 0 ]]; then
      if [[ -n "${MYSQL_DATABASE:-}" ]]; then
        ARGS+=("$MYSQL_DATABASE")
      else
        echo "Error: no database specified and MYSQL_DATABASE is unset." >&2
        return 1
      fi
    else
      ARGS+=("$@")
    fi
  else
    ARGS+=("$@")
  fi

  # 4) exec the dump command
  exec docker exec $FLAGS "$SERVICE_NAME" mysqldump "${ARGS[@]}"
}

# ————————————————————————————————————————————————
# if script is run (not sourced), invoke the function
# ————————————————————————————————————————————————
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  mysqldump "$@"
fi
