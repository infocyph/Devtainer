#!/usr/bin/env bash
# server – Devtainer CLI launcher
# shellcheck disable=SC1090,SC2155

set -euo pipefail

###############################################################################
# 0. PATHS & CONSTANTS
###############################################################################
DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
CFG="$DIR/docker"
ENV_MAIN="$DIR/.env"
ENV_DOCKER="$CFG/.env"
COMPOSE_FILE="$CFG/compose/main.yaml"
COLOR() { printf '\033[%sm' "$1"; }
RED=$(COLOR '0;31') GREEN=$(COLOR '0;32') CYAN=$(COLOR '0;36')
YELLOW=$(COLOR '1;33') NC=$(COLOR '0')

###############################################################################
# 1. COMMON HELPERS
###############################################################################
die() { printf "%bError:%b %s\n" "$RED" "$NC" "$*"; exit 1; }

need() { command -v "$1" &>/dev/null || die "'$1' not installed"; }

docker_compose() {
  docker compose                                      \
    --project-directory "$DIR"                        \
    -f "$COMPOSE_FILE"                                \
    --env-file "$ENV_DOCKER" "$@"
}

update_env() {                                    # update_env <file> <VAR> <value>
  local file=$1 var=$2 val=$3; mkdir -p "$(dirname "$file")"
  grep -qE "^[# ]*$var=" "$file" 2>/dev/null \
    && sed -Ei "s|^[# ]*($var)=.*|\1=$val|" "$file" \
    || echo "$var=$val" >>"$file"
}

http_reload() {
  printf "%sReloading HTTP…%s\n" "$GREEN" "$NC"
  docker ps -qf name=NGINX  && docker exec NGINX nginx -s reload  &>/dev/null || true
  docker ps -qf name=APACHE && docker exec APACHE apachectl graceful &>/dev/null || true
  printf "%sHTTP reloaded%s\n" "$GREEN" "$NC"
}

chmod_tree() { find "$1" "$2" -exec chmod "$3" {} +; }

###############################################################################
# 2. PERMISSIONS FIX-UP
###############################################################################
fix_perms() {
  [[ $EUID -eq 0 ]] || die "Run 'server setup permissions' with sudo"

  chmod 755 "$DIR"

  chmod 775 "$DIR/configuration"
  chmod_tree "$DIR/configuration" -type f 664
  chmod g+s   "$DIR/configuration"

  chmod 755 "$DIR/docker"
  chmod_tree "$DIR/docker" -type f 644

  chmod 2777 "$DIR/data"
  find "$DIR/data" -mindepth 1 -maxdepth 1 -type d -exec chmod 2777 {} +
  chmod_tree "$DIR/data" -type f 666

  chmod -R 777 "$DIR/logs"

  chmod 755 "$DIR/bin"
  find "$DIR/bin" -type f ! -name '*.bat' -exec chmod 744 {} +
  chmod 744 "$DIR/server"

  ln -sf "$DIR/server" /usr/local/bin/server
  printf "%sPermissions assigned%s\n" "$GREEN" "$NC"
}

###############################################################################
# 3. DOMAIN & PROFILE UTILITIES (unchanged behaviour)
###############################################################################
mkhost() { docker exec SERVER_TOOLS mkhost "$@"; }

setup_domain() {
  mkhost --RESET
  mkhost
  local php_prof; php_prof=$(mkhost --ACTIVE_PHP_PROFILE || true)
  local svr_prof; svr_prof=$(mkhost --APACHE_ACTIVE     || true)
  [[ -n $php_prof ]] && modify_profiles add "$php_prof"
  [[ -n $svr_prof ]] && modify_profiles add "$svr_prof"
  mkhost --RESET
}

modify_profiles() {                                # add/remove <profile …>
  local action=$1; shift
  local current=$(grep -E "^COMPOSE_PROFILES=" "$ENV_DOCKER" | cut -d= -f2- | tr , '\n')
  local -a new=()

  case $action in
    add)     new=("$@" $current) ;;
    remove)  for p in $current; do [[ ! " $* " =~ " $p " ]] && new+=("$p"); done ;;
    *) die "modify_profiles: invalid action '$action'" ;;
  esac

  IFS=, update_env "$ENV_DOCKER" COMPOSE_PROFILES "${new[*]}"
}

###############################################################################
# 4. LAUNCH PHP CONTAINER INSIDE DOCROOT (unchanged behaviour)
###############################################################################
launch_php() {
  local domain=$1
  local nconf="$DIR/configuration/nginx/$domain.conf"
  local aconf="$DIR/configuration/apache/$domain.conf"
  [[ -f $nconf ]] || die "No Nginx config for $domain"

  local docroot php
  if grep -q fastcgi_pass "$nconf"; then
    php=$(grep -Eo 'fastcgi_pass ([^:]+):9000' "$nconf" | awk '{print $2}' | sed 's/:9000$//')
    docroot=$(grep -m1 -Eo 'root [^;]+' "$nconf" | awk '{print $2}')
  else
    [[ -f $aconf ]] || die "No Apache config for $domain"
    docroot=$(grep -m1 -Eo 'DocumentRoot [^ ]+' "$aconf" | awk '{print $2}')
    php=$(grep -Eo 'proxy:fcgi://([^:]+):9000' "$aconf" | sed 's/.*:\/\/\([^:]*\):.*/\1/')
  fi
  [[ $php ]] || die "Could not detect PHP container for $domain"
  [[ $docroot ]] || docroot=/app

  docker exec -it "$php" bash --login -c "cd '$docroot' && exec bash"
}

###############################################################################
# 5. ROOT-CA INSTALL
###############################################################################
install_ca() {
  local src="$DIR/configuration/rootCA/rootCA.pem"
  local dest=/usr/local/share/ca-certificates/rootCA.crt
  [[ $EUID -eq 0 ]] || die "install certificate requires sudo"
  [[ -r $src ]]     || die "certificate not found: $src"

  printf "%sInstalling root CA…%s\n" "$CYAN" "$NC"
  install -m 644 "$src" "$dest"
  command -v update-ca-certificates &>/dev/null && update-ca-certificates
  command -v trust &>/dev/null              && trust extract-compat
  printf "%sRoot CA installed → %s%s\n" "$GREEN" "$dest" "$NC"
}

###############################################################################
# 6. COMMANDS
###############################################################################
cmd_up()          { docker_compose up; }
cmd_start()       { docker_compose up -d; http_reload; }
cmd_reload()      { cmd_start; }
cmd_stop()        { docker_compose down; }
cmd_down()        { cmd_stop; }
cmd_restart()     { cmd_stop; cmd_start; }
cmd_reboot()      { cmd_restart; }
cmd_rebuild()     { docker_compose down; docker_compose build --no-cache --pull "${@:2}"; }
cmd_config()      { docker_compose config; }
cmd_tools()       { docker exec -it SERVER_TOOLS bash; }
cmd_lzd()         { docker exec -it SERVER_TOOLS lazydocker; }
cmd_http()        { [[ $2 == reload ]] && http_reload; }
cmd_core()        { [[ $2 ]] || die "Usage: server core <domain>"; launch_php "$2"; }

cmd_setup() {
  case ${2:-} in
    permissions|perms|perm) fix_perms ;;
    domain)                 setup_domain ;;
    profiles|profile)       modify_profiles add "${@:3}" ;;
    env)
      local file=$ENV_MAIN; [[ $3 == docker ]] && file=$ENV_DOCKER
      "${DIR}/bin/env-helper" "$file" ;;  # assuming external script
    *) die "setup <permissions|domain|profiles|env>" ;;
  esac
}

cmd_install() { [[ $2 == certificate ]] && install_ca || die "install certificate"; }

cmd_help() {
  cat <<EOF
${CYAN}Usage:${NC} server <command> [options]

${CYAN}Core commands:${NC}
  up / start [ -d ]          Start docker stack
  stop / down                Stop stack
  reload / restart           Restart stack + reload HTTP
  rebuild                    Rebuild images (no cache)
  config                     Validate compose
  tools                      Enter SERVER_TOOLS container
  lzd | lazydocker           Start LazyDocker in SERVER_TOOLS
  http reload                Reload Nginx/Apache
  core <domain>              Open bash in PHP container for <domain>

${CYAN}Setup commands:${NC}
  setup permissions          Fix file permissions
  setup domain               Run mkhost + auto-profile
  setup profiles add|remove <name…>
  setup env [docker]         Interactive .env editor

${CYAN}Misc:${NC}
  install certificate        Install local rootCA
  help                       This help
EOF
}

###############################################################################
# 7. MAIN
###############################################################################
main() {
  need docker; need readlink
  [[ $# -gt 0 ]] || { cmd_help; exit 1; }

  update_env "$ENV_DOCKER" WORKING_DIR "$DIR"
  update_env "$ENV_DOCKER" USER        "$(id -un)"

  case "$1" in
    php|mariadb|mariadb-dump|mysql|mysql-dump|psql|pg_dump|pg_restore|redis|composer)
      exec "$DIR/bin/$1" "${@:2}" ;;
  esac

  cmd_${1,,} "$@"
}

main "$@"
