#!/bin/bash

set -euo pipefail
directory="$(dirname -- "$(readlink -f -- "$0" || greadlink -f -- "$0")")"

# Display usage information
usage() {
  cat <<EOF
${CYAN}Usage:${NC}
$0 {up|start|reload|stop|down|reboot|restart|rebuild|cli|core|tools|lzd|help}
or
server {up|start|reload|stop|down|reboot|restart|rebuild|cli|core|tools|lzd|help}

Commands:
  ${YELLOW}up${NC}               Start Docker services (foreground)
  ${YELLOW}start, reload${NC}    Start or reload Docker services (background)
  ${YELLOW}stop, down${NC}       Stop or shut down Docker services
  ${YELLOW}reboot, restart${NC}  Restart Docker services
  ${YELLOW}rebuild${NC}          Rebuild Docker images with no cache
  ${YELLOW}cli${NC}              Access the PHP container based on a domain configuration
  ${YELLOW}core${NC}             Access the Core container as 'devuser'
  ${YELLOW}tools${NC}            Access the SERVER_TOOLS container as 'devuser'
  ${YELLOW}lzd${NC}              Launch LazyDocker in the SERVER_TOOLS container
  ${YELLOW}help${NC}             Show this usage guide
EOF
}

if [ $# -eq 0 ]; then
  echo -e "${RED}Error: No command provided.${NC}"
  usage
  exit 1
fi

source "$directory/docker/utilities/common"
source "$directory/docker/utilities/main"
source "$directory/docker/utilities/common"
source "$directory/docker/utilities/domain"
source "$directory/docker/utilities/profiles"
source "$directory/docker/utilities/env"

check_required_commands "docker" "readlink"
check_file_existence "/.env"
ensure_files_exist \
  "/docker/.env" \
  "/configuration/php/php.ini" \
  "/configuration/scheduler/supervisor-worker.conf" \
  "/configuration/scheduler/supervisor-logrotate"
update_env "$directory/docker/.env" "WORKING_DIR" "$directory"
#copy_files "/configuration/scheduler/" "/docker/conf/docker-files/cli/" "*" ".gitignore"

# Handle provided commands
case "$1" in
setup)
  case "$2" in
    permissions)
      assign_permissions
      echo -e "${GREEN}Necessary Permissions have been assigned.${NC}"
      ;;
    domain)
      while true; do
        configure_server
        read -e -r -p "$(echo -e "${YELLOW}Do you want to configure another site? (y/n):${NC}") " CONTINUE
        if [[ "$CONTINUE" != "y" ]]; then
          break
        fi
      done
      echo -e "${GREEN}All configurations have been completed.${NC}"
      ;;
    profiles)
      prompt_common_vars
      for service in "${!services_and_profiles[@]}"; do
        process_service "$service"
      done
      echo -e "${GREEN}Setup completed.${NC}"
      ;;
    env)
      env_file="$directory/.env"
      target="${3:-}"
      if [[ "$target" == "docker" ]]; then
        env_file="$directory/docker/.env"
      fi
      process_env_file "$env_file"
      ;;
    *)
      echo -e "${RED}Invalid setup command: $2${NC}"
      usage
      exit 1
      ;;
  esac
  ;;
up)
  docker_compose up
  ;;
start | reload)
  docker_compose up -d
  reload_http_containers
  ;;
stop | down)
  docker_compose down
  ;;
reboot | restart)
  docker_compose down && docker_compose up -d
  reload_http_containers
  ;;
rebuild)
  docker_compose down && docker_compose build --no-cache --pull "${@:2}"
  ;;
config)
  docker_compose config
  ;;
http)
  if [[ "$2" == "reload" ]]; then
    reload_http_containers
  fi
  ;;
core)
  if [[ -z "$2" ]]; then
    echo -e "${RED}Please provide a domain (e.g., ./server core test.com).${NC}"
    exit 1
  fi
  launch_php_container "$2"
  ;;
tools)
  docker exec -it SERVER_TOOLS bash
  ;;
lzd)
  docker exec -it SERVER_TOOLS lazydocker
  ;;
help)
  usage
  ;;
*)
  echo -e "${RED}Invalid command: $1${NC}"
  usage
  exit 1
  ;;
esac

unset directory

